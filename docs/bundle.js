!function(t){var n={};function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(i,o,function(n){return t[n]}.bind(null,o));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var i,o=function(){function t(){}return t.getRandomInt=function(t,n){return t=Math.ceil(t),n=Math.floor(n),Math.floor(Math.random()*(n-t))+t},t.getRandomEntry=function(t){return t[this.getRandomInt(0,t.length)]},t}(),r=function(){function t(t,n){this.x=t,this.y=n}return t.distance=function(t,n){return Math.sqrt(Math.pow(n.x-t.x,2)+Math.pow(n.y-t.y,2))},t.generateRandomPoint=function(n,e,i,r){return new t(o.getRandomInt(n,e),o.getRandomInt(i,r))},t}(),s=function(){function t(t,n,e,i){void 0===i&&(i=1),this.hue=t,this.saturation=n,this.lightness=e,this.alpha=i}return t.prototype.toString=function(){return"hsla("+this.hue+","+this.saturation+"%,"+this.lightness+"%,"+this.alpha+")"},t}(),c=(new s(270,90,80),new s(318,90,80),new s(210,90,80),new s(100,90,80),function(){function t(t,n){this.position=t,this.radius=n}return t.prototype.setColor=function(t){this.color=t},t.prototype.intersectsWith=function(t){return r.distance(this.position,t.position)<=this.radius+t.radius+5},t.prototype.draw=function(t){t.fillStyle=this.color.toString(),t.beginPath(),t.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI,!0),t.fill()},t.generateRandomCircle=function(n,e,i){return new t(r.generateRandomPoint(n.x,n.y,e.x,e.y),o.getRandomInt(i.x,i.y))},t}()),u=function(){function t(t,n,e){this._height=e,this._width=n,this._canvas=document.createElement("canvas"),this._canvas.width=this._width,this._canvas.height=this._height,t.appendChild(this._canvas),this._circles=[],this._context=this._canvas.getContext("2d")}return t.prototype.setColors=function(t){this._colors=t},t.prototype.addCircle=function(t){this._circles.push(t)},t.prototype.addCircles=function(t){this._circles=this._circles.concat(t)},t.prototype.isInsideBounds=function(t){return t.position.x-t.radius>0&&t.position.y-t.radius>0&&t.position.x+t.radius<this._width&&t.position.y+t.radius<this._height},t.prototype.generateRandomCircles=function(t){for(var n=0;n<t;n++){var e=this._createCircle();e&&this._circles.push(e)}},t.prototype.generateRandomCirclesRecursive=function(t){var n=this;if(0!==t){t--;var e=this._createCircle();e&&(this._circles.push(e),this.draw()),setTimeout(function(){return n.generateRandomCirclesRecursive(t)},100)}else console.log("Done creating circles")},t.prototype._createCircle=function(){var t,n,e=0,i=0,s=1;do{e++,2e3===++i&&(i=0,s-=.1,s=Math.max(s,.1)),(t=c.generateRandomCircle(new r(0,this._width),new r(0,this._height),new r(10,150*s))).setColor(o.getRandomEntry(this._colors)),(n=this.isInsideBounds(t)&&!this._circles.some(function(n){return n.intersectsWith(t)}))||(t=null)}while(!n&&e<1e4);return t},t.prototype.draw=function(){var t=this;this._context.fillStyle="#fff",this._context.fillRect(0,0,this._width,this._height),this._circles.forEach(function(n){n.draw(t._context)})},t}(),a=(i=function(t,n){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}i(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),h=function(t){function n(n,e,i){var o=this,s=Math.min(e,i);return(o=t.call(this,n,s,s)||this)._radius=s/2,o._position=new r(o._radius,o._radius),o}return a(n,t),n.prototype.isInsideBounds=function(t){return r.distance(t.position,this._position)+t.radius<this._radius},n}(u);new(function(){function t(){var t=window.innerWidth,n=window.innerHeight,e=document.getElementById("container"),i=new h(e,t,n),o=[new s(270,90,65),new s(318,90,65),new s(210,90,65)];i.setColors(o),i.generateRandomCirclesRecursive(2e3),i.draw()}return t.prototype.createRandomizedColors=function(t){for(var n=[],e=o.getRandomEntry(t),i=0;i<3;i++)n.push(new s(e.hue,e.saturation,e.lightness-20*i));return n},t}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,